{"/":{"title":"ü™¥ Sistemas Distribuidos","content":"\nResumen de la materia **Sistemas Distribuidos**\n\n## Indice\n- [Distribuciones Linux](Examen1/DistribucionesLinux.md)\n\t- [Caracteristica](Examen1/DistribucionesLinux#Caracteristicas.md)\n- [Que es](Examen1/Quees.md)\n- [ModelosFundamentales](Examen1/ModelosFundamentales.md)\n- [TCP-UDP](Examen1/TCP-UDP.md)\n- [Raids](Examen1/Raids.md)\n- [VPN](Examen1/VPN.md)\n- [Arquitecturas](Examen1/Aruitecturas.md)\n","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/Aruitecturas":{"title":"","content":"# Arquitecturas\n## Modelos Arquitect√≥nicos En Sistemas Distribuidos \nUn modelo arquitect√≥nico puede ser definido como un prototipo o representaci√≥n de la estructura de un sistema, construido con el fin de estudiar distintos aspectos en torno al mismo, como pueden ser el dise√±o o la eficiencia. \n\nLos tipos de modelos arquitect√≥nicos se diferencian en \n- El reparto de responsabilidades entre componentes del sistema\n- La ubicaci√≥n de los componentes del sistema \nTipos de modelos \n- Cliente-servidor \n- Servicios proporcionados por m√∫ltiples servidores \n- Servidores proxy y cach√©s\n- Otros derivados\n- Sistemas de igual a igual (peer to peer)\n\n## Arquitectura De Software \nEl t√©rmino arquitectura de software puede ser definido como aquella organizaci√≥n l√≥gica que se enfoca en los componentes de software y como estos interact√∫an con otras estructuras.\n\n### Clasificaci√≥n \nUna vez entendiendo dicho t√©rmino es que se puede hablar de los siguientes modelos: \n#### Modelo Arquitect√≥nico En Capas\nComo su nombre indica, este modelo proporciona un enfoque modular al software, es decir, separa cada componente con el fin de ser m√°s eficiente; de esta manera, se crea un orden en la secuencia de pasos y cuando se realiza una modificaci√≥n a una capa de manera independiente no se afecta al resto del sistema.\n\nPara dejar la idea un poco m√°s clara, un ejemplo que se puede dar de este tipo de arquitectura es el modelo OSI (modelo de interconexi√≥n de sistemas abiertos) el cual utiliza este modelo para obtener mejores resultados. \n\n#### Modelo Arquitect√≥nico Basado En Objetos\nEl modelo basado en objetos se basa en la idea de tener una cierta disposici√≥n de objetos que se encuentran d√©bilmente acoplados y sin una arquitectura fija. A diferencia del anterior modelo no existe una secuencia de pasos a seguir, en cambio, la interacci√≥n est√° dada a trav√©s de un conector o interfaz donde cada objeto puede interactuar con otro a trav√©s de la llamada de uno o varios m√©todos.\n\nEjemplo de este tipo de modelo arquitect√≥nico son los sistemas de navegaci√≥n y ayuda a la gesti√≥n de transportes, donde distintos componentes (objetos) interact√∫an entre s√≠.\n\n#### Modelo Arquitect√≥nico Centrado En Datos\nEste modelo de arquitectura funciona en base a un repositorio de datos central, tal y como indica su nombre, desde el cual se pueden ingresar y solicitar datos. \n\nUn ejemplo simple de este tipo de modelo es el de un almac√©n de productos el cual ‚Äúingresa y actualiza‚Äù datos cuando recibe nuevos productos los cuales pueden ser a su vez solicitados por sus clientes.\n\n#### Modelo Arquitect√≥nico Basado En Eventos\nAl igual que en los casos anteriores el nombre de esta arquitectura resume de buena manera su funcionamiento, el cual est√° dado a trav√©s de eventos; es decir, cuando ocurre un evento el sistema suscrito recibe una notificaci√≥n y act√∫a en consecuencia a la misma. \n\nUna de las ventajas y principales diferencias con los anteriores modelos explicados es que los componentes de este modelo est√°n acoplados de manera flexible, lo que facilita el modificarlos, agregarlos o eliminarlos. Ejemplo de este modelo es Facebook, debido a las caracter√≠sticas antes mencionadas.\n## Arquitetura del sistema\nEste concepto puede ser definido como aquella arquitectura que se basa en el sistema en si y en la ubicaci√≥n de todos los componentes del mismo. Teniendo como punto el de un sistema distribuido, se puede decir que los modelos arquitect√≥nicos que m√°s relevancia tienen en este √°mbito son dos.\n\n### Modelo Arquitect√≥nico Cliente-Servidor (Centralizadas)\nEste modelo, como su nombre indica consta de un cliente y un servidor. El servidor es donde se encuentran todos los procesos y el cliente es donde el usuario interact√∫a con dicho servidor; en ese sentido si el cliente solicita algo al servidor, este le responder√°. Este es un modelo que es m√°s estable y seguro que el modelo punto a punto, pero es m√°s lento que el mismo. El ejemplo m√°s grande que se puede dar de un sistema de este tipo es de la World Wide Web, donde se utiliza un programa (navegador) como cliente\n\n### Modelo Arquitect√≥nico Punto A Punto (Descentralizadas)\nTambi√©n llamado peer-to-peer o P2P, este modelo funciona teniendo como base la falta de un control central en un sistema distribuido; es decir, un nodo puede actuar como cliente o como servidor en cualquier momento; si el nodo hace una solicitud es tratado como un cliente y si por el contrario proporciona algo en respuesta a una solicitud se lo trata como el servidor. Existen tres tipos de Modelos P2P, el modelo estructurado, el no estructurado y el h√≠brido. Ejemplo de esto son los servicios de telefon√≠a por Internet.\n\n### Hibiridas\nMezcla de las 2\n","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/DistribucionesLinux":{"title":"","content":"# Distribucion de Linux\nUna distribuci√≥n es un conjunto de programas GNU / Linux debidamente precompilados y configurados para funcionar juntos. Adicionalmente, la mayor√≠a de distribuciones incluyen otros componentes que aportan valor al conjunto. Una distribuci√≥n es una de las formas en que las empresas pueden ganar dinero con software libre. \n\nExisten organizaciones comerciales que se dedican a empaquetar juntos los programas, incluirlos en alg√∫n medio, a√±adir un manual de instrucciones y proporcionar soporte t√©cnico. La mayor√≠a de fabricantes de distribuciones reinvierten una parte de sus beneficios en iniciativas que ayuden a la comunidad de software libre. Tambi√©n existen distribuciones realizadas por voluntarios y que no tienen √°nimo de lucro.\n\n## Caracteristicas\nEntre las cosas que se pueden esperar de una distribuci√≥n moderna se cuentan: \n\t‚Ä¢ Un programa de instalaci√≥n que gu√≠e al usuario desde el principio e instale los paquetes b√°sicos. \n\t‚Ä¢ Un gestor de paquetes que se encargue de proporcionar el interfaz necesario para que el administrador pueda instalar y desinstalar programas de una manera f√°cil. \n\t‚Ä¢ Un entorno gr√°fico (normalmente KDE o GNOME), con el que se integren el resto de los programas. \n\t‚Ä¢ Manuales de instalaci√≥n y uso y documentaci√≥n adicional sobre los programas. \n\t‚Ä¢ Un sistema de seguimiento de errores (bugs) y fallos de seguridad que proporcione al usuario versiones corregidas de los programas lo m√°s r√°pido posible cuando se detecte un fallo.\n\t\n\n## Ramas diferentes\n- Basadas en Redhat: Sistema rpm (RedHat, Madrake, SuSE) \n- Basadas en Debian: Sistema de (Debian)\n\n### Redhat\nEs la distribuci√≥n m√°s usada en el mundo; es f√°cil de instalar y de usar. Su gestor de paquetes RPM se ha convertido en un est√°ndar en el mundo GNU/Linux. Incluye multitud de herramientas gr√°ficas.\n\n### Debian\nEs la que mayor cantidad de software contiene. Realizada enteramente por voluntarios y basada exclusivamente en software libre. Su sistema de paquetes dispone de caracter√≠sticas realmente potentes, lo que hace del uno de sus puntos fuertes.\n\n### Distribuiciones\n- stable (Woody): Distribuci√≥n oficial m√°s reciente. Versi√≥n de producci√≥n. Soporte de seguridad. \n- testing (Sarge): Distribuci√≥n de ‚Äúpruebas‚Äù. Versiones de paquetes m√°s recientes a√∫n no aceptadas en la rama estable. \n- unstable (Sid): Distribuci√≥n de desarrollo de Debian.\n\n## Por que Debian\n### M√∫ltiples arquitecturas y kernels \nActualmente Debian soporta un impresionante n√∫mero de arquitecturas CPU: alpha, amd64, armel, hppa, i386, ia64, mips, mipsel, powerpc, s390, y sparc. Tambi√©n corre con los kernels GNU Hurd y FreeBSD adem√°s de Linux, y con la utilidad debootstrap es dif√≠cil que encuentre un dispositivo que no pueda correr Debian.\n\n### Software de seguridad \nMuchos desconocen que cualquier cosa enviada por la red puede ser le√≠da por cualquier m√°quina entre usted y el receptor. Debian tiene paquetes del famoso software GPG (y PGP) que permite enviar correo entre usuarios preservando su privacidad. Adem√°s, ssh permite crear conexiones seguras a otras m√°quinas que tengan ssh instalado.\n\n### Distribuciones mas usadas\nUna distribuci√≥n derivada de Debian es una distribuci√≥n que est√° basada en el trabajo hecho en Debian pero que tiene sus propias metas, identidad y audiencia, y que ha sido creada por una entidad independiente de Debian. Las distribuciones derivadas modifican Debian para alcanzar sus propias metas. \n\nDebian da la bienvenida y anima a las organizaciones que quieran desarrollar nuevas distribuciones basadas en Debian. Conforme al esp√≠ritu del contrato social de Debian, esperamos que las distribuciones derivadas aporten su trabajo a Debian y a los proyectos originales (¬´upstream¬ª), de forma que todo el mundo se pueda beneficiar de las mejoras que introduzcan.\n\n### Distribuciones destacadas\n‚Ä¢ Grml: sistema ¬´en vivo¬ª (¬´live system¬ª) para administradores del sistema. \n‚Ä¢ Kali Linux: auditor√≠as de seguridad y pruebas de penetraci√≥n. \n‚Ä¢ Purism PureOS: publicaci√≥n contin√∫a enfocada hacia la privacidad, seguridad y comodidad, respaldada por la FSF. \n‚Ä¢ Tails: protecci√≥n de la privacidad y anonimato. \n‚Ä¢ Ubuntu: popularizar Linux en todo el mundo","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/Modelos-de-interaccion/ModeloFallos":{"title":"","content":"# Modelo de Fallos\n## Tipos de fallo seg√∫n entidad\n- Fallos de proceso\n- Fallos de comunicaci√≥n\n## Tipo de fallo seg√∫n el problema\n- Fallos por omisi√≥n **Afecta al canal**\n\t-  No se consigue realizar una acci√≥n que se deber√≠a poder hacer\n\t-  Un mensaje insertado en un b√∫fer de mensajes salientes nunca llega al b√∫fer de mensajes entrantes del destino\n\n- Fallos arbitrarios (bizantinos)¬† **Afecta al proceso o canal**\n\t- Errores de cualquier tipo, fuera del esquema de mensajes\n\t- El proceso/Canal presenta un comportamiento arbitrario: omisiones, paradas, env√≠os o pasos incorrectos sin patr√≥n claro\n\n- Fallos de temporizaci√≥n\n\t- Superaci√≥n de tiempos l√≠mite en un sistema s√≠ncrono\n\n- Fallo del procesamiento (crash)¬† **Afecta al proceso**\n\t- Un mensaje insertado en un b√∫fer de mensajes saliente, otros procesos no pueden detectar la parada\n\n- Fallo parada (fail-stop)¬† **Afecta al proceso**\n\t- Fallo de procesamiento que puede ser detectado con certeza por el resto de los procesos\n\t- El proceso para y permanece parado, otros procesos pueden detectar la parada\n\n- Detecci√≥n del fallo por timeouts (s√≠ncrono)\n\t- Si el proceso no responde consideramos que ha habido un fallo\n\t- En sistemas as√≠ncronos, nunca podemos estar seguros\n\n- Fallo por omisi√≥n en comunicaciones\n\t-  Fallo por omisi√≥n de env√≠o¬† **Afecta al proceso**\n\t\t-  Un proceso completa el envio pero no se coloca el mensaje en el b√∫fer de mensajes salientes\n\t- Fallo por omisi√≥n de comunicaci√≥n¬†**Afecta al canal**\n\t- Fallo por omisi√≥n de recepci√≥n¬† **Afecta al proceso**\n\t\t- El mensaje se coloca en el buffer de recepci√≥n pero el proceso no lo recibe\n\n## Fallos de temporizaci√≥n\n- Sistemas s√≠ncronos\n\t- Reloj Afecta al proceso\n\t\t- El reloj local del proceso excede el l√≠mite de su tasa de deriva respecto al tiempo de referencia\n\t- Prestaciones Afecta el proceso\n\t\t- El proceso excede el l√≠mite sobre el intervalo\n\t- Prestaciones Afecta el canal\n\t\t- La transmisi√≥n de un mensaje toma m√°s tiempo que el tiempo permitido\n- Sistemas As√≠ncronos\n\t- No hay fallos de temporizaci√≥n\n## Comunicaci√≥n fiable entre procesos\nSe debe cumplir la:\n- Validez\n\t- Cualquier mensaje en el b√∫fer de mensajes salientes llegar√° eventualmente al b√∫fer de mensajes entrantes\n\t- Es decir, no hay fallos por omisi√≥n en el canal\n- Integridad\n\t- El mensaje recibido es id√©ntica al enviado y no se repiten mensajes\n\t\t- Protocolo que adjunta n√∫meros de secuencia a los mensajes\n\t\t- Canales de comunicacion seguros\n\t- No hay fallos bizantino","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/Modelos-de-interaccion/ModelosInteraccion":{"title":"","content":"# Modelos de interaccion\nRespecto a la interacci√≥n, los sistemas distribuidos deben tener en cuenta que\n- Hay limitaciones debidas a la comunicaci√≥n\n- Es imposible predecir el retraso con el que llega un mensaje\n- Es imposible tener una noci√≥n global de tiempo\n\t- La ejecuci√≥n es no determinista y dif√≠cil de depurar\n\n## Algoritmo distribuido\nDefinici√≥n de los pasos que hay que llevar a cabo por cada uno de los procesos del sistema, incluyendo los mensajes de transmisi√≥n entre ellos.\n\n## Prestaciones del canal de comunicaci√≥n\n### Latencia\n- Retardo entre el env√≠o de un mensaje y su recepci√≥n\n- Ancho de banda\n- Informaci√≥n que puede transmitirse en un intervalo de tiempo: Fluctuaci√≥n (jitter)\n- Variaci√≥n del tiempo invertido en repartir una serie de mensajes\n\n## Protocolos de Enrutamiento\n- RIP: Es un protocolo de enrutamiento que se basa en el n√∫mero de saltos para decidir cu√°l es la mejor ruta hacia una red de destino.\n- OSPF: Es un protocolo de enrutamiento cuya m√©trica es el costo. Aquella ruta que posea el menor costo ser√° la ideal y la que ser√° seleccionada como mejor camino hacia una red de destino.\n- BGP: BGP significa Border Gateway Protocol y se utiliza para permitir la comunicaci√≥n entre los routers de borde pertenecientes a sistemas aut√≥nomos diferentes. BGP es un protocolo de gran importancia para las empresas Telco y para los ISPs.\n- EIGRP: Fue desarrollado por la empresa Cisco Systems y utiliza una m√©trica compuesta para decidir la mejor ruta hacia una red de destino. Puedes obtener m√°s detalles de su configuraci√≥n y funcionamiento en nuestro Curso gratuito de Fundamentos de EIGRP que encontrar√°s en nuestra plataforma de Telecapp Academy.\n\n## Relojes y eventos de tiempo\nCada computador tiene su propio reloj interno (reloj local)\n- Puede usarse en procesos locales para marcas de tiempo \n### Tasa de deriva de reloj (clock drift rate)\n- Evoluci√≥n de la diferencia entre un reloj local y un reloj de referencia ‚Äúperfecto‚Äù\n- Receptores GPS\n- Network Time Protocol (NTP)\n- Mecanismos de ordenaci√≥n de eventos\n\n### Dos tipos de modelo de interacci√≥n\n- Sincrono\n- Asincrono\n\nEn la comunicaci√≥n sincr√≥nica, los datos se transfieren en forma de tramas, mientras que, en la asincr√≥nica, los datos se env√≠an de un byte en un byte. La transmisi√≥n sincr√≥nica necesita una se√±al de reloj entre el emisor y el receptor para informar al segundo sobre la llegada del nuevo byte o mensaje.\n\n#### Modelos Sincr√≥nicos\nConocimiento de caracter√≠sticas temporales:\n- El tiempo de ejecuci√≥n de cada etapa de un proceso tiene ciertos l√≠mites inferior y superior conocidos \n- Cada mensaje transmitido sobre un canal se recibe en un tiempo l√≠mite conocido\n\t- Cada proceso tiene un reloj local cuya tasa de deriva sobre el tiempo de referencia tiene un l√≠mite conocido\n- A nivel te√≥rico, podemos establecer unos l√≠mites para tener una idea aproximada de c√≥mo se comportar√° el sistema \n- A nivel pr√°ctico, es imposible garantizar esos l√≠mites siempre \n- Aunque a veces se pueden utilizar, por ejemplo, como tineos\n\n#### Modelos Asincr√≥nicos\nNo hay limitaciones en cuanto a:\n- Velocidad de procesamiento.\n- Retardos en la transmisi√≥n de mensajes.\n- Tasas de deriva de los relojes.\n- Los sistemas distribuidos reales suelen ser as√≠ncronos. \n\tPor ejemplo, Internet.\n- Una soluci√≥n v√°lida para un sistema as√≠ncrono lo es tambi√©n para uno s√≠ncrono.","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/Modelos-de-interaccion/ModelosSeguridad":{"title":"","content":"# Modelos de Seguridad\nLa seguridad en un sistema distribuido se basa en la seguridad de los procesos y canales utilizados\n- Entendida como seguridad de objetos\n- Almacenados e invocados por los procesos\n- Transmitidos a trav√©s de los canales\n- Se logra mediante un sistema de derechos de acceso y distintos tipos de autoridad\n\n## Principal\nAutoridad con la que se ordena cada invocaci√≥n de objetos o sus resultados\n- Se contrasta con los derechos de acceso de dicho objeto\n## Modelo de enemigo\n### Entidad\nCualquier m√°quina conectada( de forma autorizada o no) a la red \n### Enemigo \nEntidad capaz de:\n- Enviar cualquier mensaje a cualquier proceso\n- Leer o copiar cualquier mensaje compartido entre dos procesos\n- Leer mensajes o emitir mensajes falsos de petici√≥n de servicios.\n\n## Amenazas a servidores\nCiertos servicios no comprueban la identidad del cliente\n- Si la comprueban, no suele ser dif√≠cil suplantarla (spoofing)\n\nEn vez de una petici√≥n de servicio aut√©ntica se busca, p. ej., obtener informaci√≥n no autorizada o bloquear el servicio (DoS)\n\n## Amenazas a clientes\n- Reciben un resultado falso de la invocaci√≥n al servicio\n- Generalmente, acompa√±ado de suplantaci√≥n de identidad\n\n## Amenazas a canales de comunicaci√≥n\n- Inyecci√≥n, copia o alteraci√≥n de mensajes que viajan por el canal\n\nPor ejemplo: obtener un mensaje de transferencia de dinero, cambiar la cuenta y re enviarlo despu√©s\n\n## T√©cnicas de seguridad\n- Autenticaci√≥n: Comprobaci√≥n de la identidad del proceso\n- Criptograf√≠a: Uso de claves p√∫blicas y privadas\n- Canales seguros: Canal de comunicaci√≥n sobre el que dos procesos han establecido una capa de seguridad basada en criptograf√≠a + autenticaci√≥n:\n\t- Se garantiza la identidad fiable de servidores y clientes\n\t- Se garantiza la integridad y privacidad de los mensajes enviados\n\t- Los mensajes incluyen una marca de tiempo para prevenir su repetici√≥n o reordenaci√≥n maliciosa\n","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/ModelosFundamentales":{"title":"","content":"# Modelos Fundamentales\nTodas las arquitecturas comparten algunas propiedades fundamentales: \nProcesos que se comunican por paso de mensajes a trav√©s de una red de computadores. \n- [[ModelosInteraccion]]: El modelo debe definir y clasificar la comunicaci√≥n entre elementos del sistema.\n- [[ModeloFallos]]: El modelo debe definir y clasificar los fallos que pueden darse en el sistema. \n- [[ModelosSeguridad]]: El modelo debe definir y clasificar los tipos de ataque que pueden afectar al sistema.\n\n\n\n","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/Quees":{"title":"","content":"# Sistemas Distribuidos\n## Que es\n**Conjunto de equipos independientes que act√∫an de forma transparente como un √∫nico equipo.**\n\nSu funci√≥n es la descentralizar el almacenamiento de la informaci√≥n o comput (BD-SERVIDORES). Tambi√©n puede definirse como una colecci√≥n de computadoras independientes, separadas f√≠sicamente, pero que aparentan ser un solo equipo realizando las m√∫ltiples tareas\n\n‚Ä¢ Se implementan en diversas plataformas de hardware y software. \n‚Ä¢ Todo se conecta por red.\n\n## Ventajas\n‚Ä¢ Eficacia. Uso racional de los recursos con que se cuenta para alcanzar un objetivo predeterminado. A mayor eficiencia menor la cantidad de recursos que se emplear√°n, logrando mejor optimizaci√≥n y rendimiento. \n‚Ä¢ Tolerancia a fallos. Permite que, en caso de que una computadora falle, otra la pueda sustituir en la realizaci√≥n de sus tareas asignadas. Al estar distribuida la informaci√≥n en nodos, en caso de que se caiga un nodo, dicha informaci√≥n va a encontrarse replicada en otros nodos. \n‚Ä¢ Mayor velocidad. Est√° en referencia a los tiempos de respuesta de una aplicaci√≥n; cuando se realiza una consulta, lo procesamientos se dividen entre todos los nodos que forman el sistema distribuido, en lugar de enviarlos a un √∫nico nodo y que el mismo tenga que hacer todo el trabajo. \n‚Ä¢ Procesamiento distribuido. Se puede definir como la forma en que es posible conectar distintas m√°quinas, logrando as√≠, que una sola tarea de procesamiento de datos pueda ser procesada o ejecutada entre varias m√°quinas de la red, es decir que un solo proceso se pueda realizar entre varias m√°quinas diferentes y conectadas a una red. \n‚Ä¢ Escalabilidad. Permite que a la arquitectura actual se le pueda adicionar m√°s poder de c√≥mputo. Se entiende por escalabilidad a la capacidad de adaptaci√≥n y respuesta de un sistema con respecto al rendimiento del mismo a medida que aumentan de forma significativa el n√∫mero de usuarios del mismo.\n\n## Desafios\n1. Seguridad. - Mantener la confidencialidad, integridad y disponibilidad de los recursos en la red. \n2. Concurrencia. - El sistema debe permitir m√∫ltiples usuarios utilizando simult√°neamente los recursos de la red. \n3. Extensibilidad. - Poder soportar nuevas funcionalidades o cambios en el sistema. \n4. Resiliencia (Tratamiento a fallos). - Un Sistema Distribuido debe poder detectar, ocultar y recuperarse de fallos que puedan ocurrir en la red. \n5. Escalabilidad. - El sistema debe mantener el rendimiento de los recursos cuando se aumenta el n√∫mero de usuarios (consumidores). \n6. Transparencia. - Para el usuario y/o el programador de aplicaciones el sistema debe ser percibido como un todo m√°s que como una colecci√≥n de recursos. \n7. Heterogeneidad. - Consiste en la capacidad de poder a√±adir o reemplazar los componentes de la red (lenguajes de programaci√≥n, sistemas operativos, protocolos, formatos, redes, hardware).","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/Raids":{"title":"","content":"# Raid\n## HDD vs SDD\n### HDD\nLos discos duros, tambi√©n conocidos como HDD, son un componente inform√°tico que sirve para almacenar de forma permanente tus datos. Esto quiere decir, que los datos no se borran cuando se apaga la unidad como pasa en los almacenados por la memoria RAM. La primera empresa en comercializarlos fue IBM en 1956. \n\nEst√°n compuestos de piezas mec√°nicas, de ah√≠ que a veces se le llame discos duros mec√°nicos, y utilizan el magnetismo para grabar tus datos y archivos. Se compone de uno o varios discos r√≠gidos unidos por un mismo eje y que giran a gran velocidad dentro de una caja met√°lica. En cada plato y en cada una de sus caras, un cabezal de lectura/escritura lee o graba tus datos sobre los discos\n\n### SDD\nLas unidades de estado s√≥lido o SSD (Solid State Drive) son una alternativa a los discos duros. La gran diferencia es que mientras los discos duros utilizan componentes mec√°nicos que se mueven, las SSD almacenan los archivos en microchips con memorias flash interconectadas entre s√≠. Por lo tanto, casi podr√≠amos considerarlos como una evoluci√≥n de las memorias USB. \n\nLos SSD suelen utilizar memorias flash basadas en NAND, que como tambi√©n son no-vol√°tiles mantienen la informaci√≥n almacenada cuando el disco se desconecta. No tienen cabezales f√≠sicos para grabar los datos, en su lugar incluyen un procesador integrado para realizar operaciones relacionadas con la lectura y escritura de datos.\n\n\n## Raid\nRAID es la sigla para \" Redundant Array of Independent Disks \". Su definici√≥n en espa√±ol ser√≠a \"Matriz Redundante de Discos Independientes \". Se trata de una tecnolog√≠a que combina varios discos r√≠gidos (HD) para formar una √∫nica unidad l√≥gica, donde los mismos datos son almacenados en todos los discos (redundancia). \n\nLa tecnolog√≠a RAID protege los datos contra el fallo de una unidad de disco duro. Si se produce un fallo, RAID mantiene el servidor activo y en funcionamiento hasta que se sustituya la unidad defectuosa. \n\nLa tecnolog√≠a RAID se utiliza tambi√©n con mucha frecuencia para mejorar el rendimiento de servidores y estaciones de trabajo. Estos dos objetivos, protecci√≥n de datos y mejora del rendimiento, no se excluyen entre s√≠.\n\n### Raid 0\nNo ofrece tolerancia a fallos, pero si mayor velocidad, algunos no consideran a esta configuraci√≥n como un RAID verdadero. Una configuraci√≥n RAID 0 con dos discos es hasta dos veces m√°s r√°pidas que un solo disco duro. **Se utiliza en entornos de laboratorio para medir las entradas y salidas de un sistema por su rapidez.**\n\n### Raid 1\nTambi√©n conocido como \"Mirroring \" o \" Espejado \", el RAID 1 funciona a√±adiendo discos r√≠gidos paralelos a los discos r√≠gidos principales existentes en la computadora. De esta manera, si, por ejemplo, una computadora posee 2 discos, se puede anexar un disco r√≠gido para cada uno, totalizando 4. **Los discos que fueron a√±adidos, trabajan como una copia del primero. **\n\nLa consecuencia en este caso, es que la grabaci√≥n de datos es m√°s lenta, pues es realizada dos veces. Sin embargo, la lectura de esa informaci√≥n es m√°s r√°pida, pues puede ser accedida de dos fuentes. **Se utiliza para el Sistema Operativo, debido a que es una copia tal cual, en caso de un fallo del mismo, es m√°s lento.**\n\n### Raid 5\nEste RAID ofrece tolerancia al fallo, pero adem√°s optimiza la capacidad del sistema permitiendo una utilizaci√≥n de hasta el 80% de la capacidad del conjunto de discos. Esto lo consigue mediante el c√°lculo de la informaci√≥n de paridad y su almacenamiento alternativo por bloques en todos lo discos del conjunto. La informaci√≥n del usuario se graba por bloques y de forma alternativa en todos ellos. Uso m√≠nimo de 3 discos. En resumen, el RAID 5 es un buen sistema integral que combina almacenamiento eficiente con excelente seguridad y rendimiento. **Es ideal para servidores de archivos y aplicaciones que tienen un n√∫mero limitado de unidades de datos.**\n\n### Raid 6\n**Acceso independiente con doble paridad**\nSimilar al RAID 5, pero incluye un segundo esquema de paridad distribuido por los distintos discos y por tanto ofrece tolerancia extremadamente alta a los fallos y a las ca√≠das de disco, ofreciendo dos niveles de redundancia. \n\nSi fallan m√°s de dos unidades de disco, los datos se tienen que restaurar a partir del medio de copia de seguridad. L√≥gicamente, la capacidad de dos unidades de disco est√° dedicada a almacenar datos de paridad en un conjunto de paridad. No obstante, en la pr√°ctica, los datos de paridad se reparten entre varias unidades de disco. \n\nEl n√∫mero m√≠nimo de unidades de disco en un conjunto de paridad es de 4. El n√∫mero m√°ximo de unidades de disco en un conjunto de paridad es de 18. RAID 6 permite almacenar grandes cantidades de datos a prueba de fallos a largo plazo al amortiguar dos posibles fallos. **Por tanto, los sistemas de servidores en los que se archivan datos son un caso de aplicaci√≥n ideal.**\n","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/TCP-UDP":{"title":"","content":"# TCP y UDP\n## TCP\nTCP (Protocolo de Control de Transmisi√≥n, por sus siglas en ingl√©s Transmission Control Protocol) es protocolo de red importante que permite que dos anfitriones (hosts) se conecten e intercambien flujos de datos. TCP garantiza la entrega de datos y paquetes (en-US) en el mismo orden en que se enviaron.\n\n## UDP\nEl Protocolo de datagrama de usuario (UDP) es un protocolo ligero de transporte de datos que funciona sobre IP. UDP proporciona un mecanismo para detectar datos corruptos en paquetes, pero no intenta resolver otros problemas que surgen con paquetes, como cuando se pierden o llegan fuera de orden.\n\n## Diferencias\n- Conexi√≥n: TCP es un protocolo orientado a la conexi√≥n mientras que UDP no utiliza conexi√≥n. TCP establece una conexi√≥n entre un remitente y un receptor antes de que se puedan enviar los datos. UDP en cambio, no establece ninguna conexi√≥n antes de enviar los datos. \n- Fiabilidad: TCP es confiable ya que garantiza que los datos enviados mediante el protocolo TCP se entreguen al receptor. Si los datos se pierden en el camino, los recuperar√° y los reenviar√°. TCP tambi√©n verifica los paquetes en busca de errores y los rastrea para que los datos no se pierdan ni se corrompan. En cambio, UDP no es confiable. Este no garantiza la entrega de los paquetes y los paquetes pueden corromperse o perderse en tr√°nsito. \n- Control de Flujo: TCP utiliza un mecanismo de control de flujo que garantiza que el remitente no sature al receptor enviando demasiados paquetes a la vez. Este, almacena los datos en un b√∫fer de env√≠o y los recibe en un b√∫fer de recepci√≥n. Cuando la aplicaci√≥n est√° lista, lee los datos del b√∫fer de recepci√≥n. Si el b√∫fer de recepci√≥n est√° lleno, el receptor no puede manejar m√°s datos y los elimina. Cada vez que el receptor recibe un paquete, env√≠a un mensaje al remitente. UDP, no proporciona control de flujo. Con UDP, los paquetes llegan de forma continua o se descartan. \n- Ordenaci√≥n: TCP ordena los paquetes para garantizar que se entreguen al cliente en el mismo orden en que se enviaron. En cambio, UDP env√≠a los paquetes sin importar el orden. \n- Velocidad: Otra diferencia entre TCP y UDP, es que TCP es m√°s lento, porque hace mucho m√°s que enviar datos. TCP establece una conexi√≥n, verifica los errores y garantiza que los archivos se reciban en el orden en que fueron enviados tal y como hemos comentado anteriormente. Por lo tanto, la velocidad es uno de los aspectos en los que destaca UDP. \n\n- Uso: TCP es el protocolo m√°s adecuado para usarse en aplicaciones que requieren una alta confiabilidad.\n\t- P√°ginas web (HTTP, HTTPS) \n\t- Correo electr√≥nico (SMTP, IMAP/POP) \n\t- SSH \n\t- FTP\n- UDP es m√°s adecuado para aplicaciones que requieren velocidad y eficiencia.\n\t- VPN \n\t- Juegos online \n\t- Videos en directo\n\t- DNS \n\t- Voz a trav√©s de internet (VoIP) \n\t- TFTP","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Examen1/VPN":{"title":"","content":"# VPN\nUna red privada virtual (VPN por sus siglas en ingl√©s) es una tecnolog√≠a que permite a los usuarios enviar y recibir datos a trav√©s de redes compartidas o p√∫blicas como si sus equipos inform√°ticos estuvieran conectados directamente a la red privada. \n\nUn protocolo de tunelizaci√≥n es un protocolo que encapsula en su datagrama otro paquete de datos completo que utiliza un protocolo de comunicaciones diferente. Esencialmente, crea un t√∫nel entre dos puntos de una red por el cual se puede transmitir de forma segura cualquier tipo de datos.","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/Seguridad":{"title":"ü™¥ Sistemas Distribuidos","content":"# Seguridad\n## DES 56 bit\nDES es el nombre del documento FIPS (Federal Information Processing Standard), es un algoritmo de cifrado por bloques de 64 bits de tama√±o. Emplea una clave de 56 bits durante la ejecuci√≥n.\n- Cuando se utiliza en comunicaciones ambos participantes deben conocer la clave secreta¬†\n- El algoritmo se puede usar para encriptar y desencriptar mensajes,¬†\n- Puede generar y verificar c√≥digos de autentificaci√≥n de mensajes\n- El problema principal es que el tama√±o de la clave (56 bits) es demasiado peque√±o para la potencia de c√°lculo actual. De hecho, el DES dej√≥ de ser el algoritmo empleado por el gobierno norteamericano en Noviembre de 1998 y de momento (hasta que el AES sea elegido), emplean el Triple DES\n\n## 3DES\nConsiste en encriptar tres veces una clave DES:\n- DES-EEE3: Tres encriptaciones DES con tres claves distintas.\n\n- Diffie y Hellman propusieron una m√°quina con un coste estimado de 20 millones de d√≥lares que podr√≠a encontrar una clave DES en un solo d√≠a.\n- Wiener propuso una m√°quina de b√∫squeda de claves con un coste de un mill√≥n de d√≥lares que encontrar√≠a una clave en 7 horas.\n\n## RSA\n- El algoritmo asim√©trico por excelencia\n- Este algoritmo se basa en la pareja de claves\n- La seguridad de este algoritmo radica en el problema de la factorizaci√≥n de n√∫meros enteros muy grandes\n- Actualmente como m√≠nimo se debe utilizar una longitud de 2048 bits, aunque es recomendable que sea de 4096 bits o superior para tener una mayor seguridad.\n- El sistema RSA permite longitudes variables, siendo aconsejable actualmente el uso de claves de no menos de 1024 bits (se han roto claves de hasta 512 bits, aunque se necesitaron m√°s de 5 meses y casi 300 ordenadores trabajando juntos para hacerlo).\n\nEl cifrado RSA funciona bajo la premisa de que el algoritmo es f√°cil de calcular en una direcci√≥n, pero casi imposible en sentido inverso. Como ejemplo, si te dijeran que 701.111 es un producto de dos n√∫meros primos, ¬øser√≠as capaces de averiguar cu√°les son esos dos n√∫meros?\n\n-   en RSA de **2048 bits, se unir√≠an para crear claves de 617 d√≠gitos**\n\n## DIFFIE HELLMAN\nSe usa para generar una clave privada a ambos extremos de un canal de comunicaci√≥n inseguro.\n- Se emplea para obtener la clave privada con la que posteriormente se cifrar√° la informaci√≥n junto con un algoritmo de cifrado sim√©trico.¬†\n- No es un algoritmo asim√©trico propiamente dicho, es un protocolo de establecimiento de claves\n- Su seguridad radica en la dificultad de calcular el logaritmo discreto de n√∫meros grandes\n- El problema de este algoritmo es que no proporciona autenticaci√≥n, no puede validar la identidad de los usuarios, por tanto, si un tercer usuario se pone en medio de la comunicaci√≥n, tambi√©n se le facilitar√≠a las claves y, por tanto, podr√≠a establecer comunicaciones con el emisor y el receptor suplantando las identidades.¬†\n- Certificaciones digitales\n\n## TLS\nTLS se traduce a Transport Layer Security o en espa√±ol Seguridad de la¬†Capa de Transporte y su sucesor SSL¬†\n-   TLS provee una comunicaci√≥n segura entre los navegadores de internet y los servidores. La conexi√≥n en s√≠, es segura gracias a que se usa una criptograf√≠a segura para encriptar los datos transmitidos.\n-   Las llaves son generadas de forma √∫nica por cada conexi√≥n y se basan en un secreto compartido negociado al comienzo de la sesi√≥n, tambi√©n conocido como ‚Äúsaludo de mano TLS‚Äù.\n-   Con la TLS 1.2, se hubieran requerido dos rondas de viaje para completar un saludo de mano TLS.\n-   Con el 1.3, requiere tan solo una ronda de viaje, la cual termina cortando hasta por la mitad la latencia de la encriptaci√≥n.\n\n## HASH\nEs un algoritmo matem√°tico que transforma cualquier bloque arbitrario de datos en una nueva serie de caracteres con una longitud fija.\n-   Independientemente de la longitud de los datos de entrada, el valor hash de salida tendr√° siempre la misma longitud.\n-   no existen dos entradas que produzcan el mismo hash de salida","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/cheatsheet":{"title":"","content":"# Markdown Cheat Sheet\n\nThanks for visiting [The Markdown Guide](https://www.markdownguide.org)!\n\nThis Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax) and [extended syntax](https://www.markdownguide.org/extended-syntax).\n\n## Basic Syntax\n\nThese are the elements outlined in John Gruber‚Äôs original design document. All Markdown applications support these elements.\n\n### Heading\n\n# H1\n## H2\n### H3\n\n### Bold\n\n**bold text**\n\n### Italic\n\n*italicized text*\n\n### Blockquote\n\n\u003e blockquote\n\n### Ordered List\n\n1. First item\n2. Second item\n3. Third item\n\n### Unordered List\n\n- First item\n- Second item\n- Third item\n\n### Code\n\n`code`\n\n### Horizontal Rule\n\n---\n\n### Link\n\n[Markdown Guide](https://www.markdownguide.org)\n\n### Image\n\n![alt text](https://www.markdownguide.org/assets/images/tux.png)\n\n## Extended Syntax\n\nThese elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.\n\n### Table\n\n| Syntax | Description |\n| ----------- | ----------- |\n| Header | Title |\n| Paragraph | Text |\n\n### Fenced Code Block\n\n```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n```\n\n### Footnote\n\nHere's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote.\n\n### Heading ID\n\n### My Great Heading {#custom-id}\n\n### Definition List\n\nterm\n: definition\n\n### Strikethrough\n\n~~The world is flat.~~\n\n### Task List\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n### Emoji\n\nThat is so funny! :joy:\n\n(See also [Copying and Pasting Emoji](https://www.markdownguide.org/extended-syntax/#copying-and-pasting-emoji))\n\n### Highlight\n\nI need to highlight these ==very important words==.\n\n### Subscript\n\nH~2~O\n\n### Superscript\n\nX^2^","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (ÊµãËØï)","content":"\n## Chinese, Japanese, Korean Support\nÂá†‰πéÂú®Êàë‰ª¨ÊÑèËØÜÂà∞‰πãÂâçÔºåÊàë‰ª¨Â∑≤ÁªèÁ¶ªÂºÄ‰∫ÜÂú∞Èù¢„ÄÇ\n\nÏö∞Î¶¨Í∞Ä Í∑∏Í≤ÉÏùÑ ÏïåÍ∏∞ÎèÑ Ï†ÑÏóê Ïö∞Î¶¨Îäî ÎïÖÏùÑ Îñ†ÎÇ¨ÏäµÎãàÎã§.\n\nÁßÅ„Åü„Å°„Åå„Åù„Çå„ÇíÁü•„Çã„Åª„ÅºÂâç„Å´„ÄÅÁßÅ„Åü„Å°„ÅØÂú∞Èù¢„ÇíÈõ¢„Çå„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2022-06-29T03:15:36.141984707Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`.\n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`.\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\nüé® [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-06-29T03:15:36.145984714Z","tags":null}}